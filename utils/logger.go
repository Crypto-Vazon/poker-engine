package utils

import (
	"fmt"
	"log"
	"time"
)

// Logger - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
type Logger struct {
	// prefix - –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: "[GameEngine]")
	prefix string

	// showTimestamp - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ timestamp –≤ –ª–æ–≥–∞—Ö
	showTimestamp bool
}

// NewLogger - —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä —Å –∑–∞–¥–∞–Ω–Ω—ã–º –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
func NewLogger(prefix string) *Logger {
	return &Logger{
		prefix:        prefix,
		showTimestamp: true,
	}
}

// getTimestamp - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:SS
func (l *Logger) getTimestamp() string {
	if !l.showTimestamp {
		return ""
	}
	return time.Now().Format("15:04:05")
}

// formatMessage - —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –∏ –≤—Ä–µ–º–µ–Ω–µ–º
func (l *Logger) formatMessage(emoji, level, message string) string {
	timestamp := l.getTimestamp()
	if timestamp != "" {
		return fmt.Sprintf("%s [%s] %s %s: %s", emoji, timestamp, l.prefix, level, message)
	}
	return fmt.Sprintf("%s %s %s: %s", emoji, l.prefix, level, message)
}

// Info - –ª–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–±—ã—á–Ω–æ–µ)
func (l *Logger) Info(message string) {
	log.Println(l.formatMessage("‚ÑπÔ∏è", "INFO", message))
}

// Infof - –ª–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º (–∫–∞–∫ printf)
func (l *Logger) Infof(format string, args ...interface{}) {
	message := fmt.Sprintf(format, args...)
	l.Info(message)
}

// Success - –ª–æ–≥–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–∑–µ–ª–µ–Ω–∞—è –≥–∞–ª–æ—á–∫–∞)
func (l *Logger) Success(message string) {
	log.Println(l.formatMessage("‚úÖ", "SUCCESS", message))
}

// Successf - –ª–æ–≥–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
func (l *Logger) Successf(format string, args ...interface{}) {
	message := fmt.Sprintf(format, args...)
	l.Success(message)
}

// Warning - –ª–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (–∂–µ–ª—Ç—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫)
func (l *Logger) Warning(message string) {
	log.Println(l.formatMessage("‚ö†Ô∏è", "WARNING", message))
}

// Warningf - –ª–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
func (l *Logger) Warningf(format string, args ...interface{}) {
	message := fmt.Sprintf(format, args...)
	l.Warning(message)
}

// Error - –ª–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É (–∫—Ä–∞—Å–Ω—ã–π –∫—Ä–µ—Å—Ç–∏–∫)
func (l *Logger) Error(message string) {
	log.Println(l.formatMessage("‚ùå", "ERROR", message))
}

// Errorf - –ª–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
func (l *Logger) Errorf(format string, args ...interface{}) {
	message := fmt.Sprintf(format, args...)
	l.Error(message)
}

// Debug - –ª–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
func (l *Logger) Debug(message string) {
	log.Println(l.formatMessage("üîç", "DEBUG", message))
}

// Debugf - –ª–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
func (l *Logger) Debugf(format string, args ...interface{}) {
	message := fmt.Sprintf(format, args...)
	l.Debug(message)
}

// === –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π ===

// GameStarted - –ª–æ–≥–∏—Ä—É–µ—Ç –∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã
func (l *Logger) GameStarted(clubID, roomID, gameID string, playersCount int) {
	log.Println(l.formatMessage("üéØ", "GAME",
		fmt.Sprintf("–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã | Club: %s | Room: %s | GameID: %s | –ò–≥—Ä–æ–∫–æ–≤: %d | –§–∞–∑–∞: pre_flop",
			clubID, roomID, gameID, playersCount)))
}

// GameStopped - –ª–æ–≥–∏—Ä—É–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫—É –∏–≥—Ä—ã
func (l *Logger) GameStopped(clubID, roomID, previousPhase string, reason string) {
	log.Println(l.formatMessage("üõë", "GAME",
		fmt.Sprintf("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–≥—Ä—ã | Club: %s | Room: %s | –§–∞–∑–∞ –±—ã–ª–∞: %s | –ü—Ä–∏—á–∏–Ω–∞: %s",
			clubID, roomID, previousPhase, reason)))
}

// GameInProgress - –ª–æ–≥–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
func (l *Logger) GameInProgress(clubID, roomID, phase string, playersCount int) {
	log.Println(l.formatMessage("üéÆ", "GAME",
		fmt.Sprintf("–ò–≥—Ä–∞ –∏–¥–µ—Ç | Club: %s | Room: %s | –§–∞–∑–∞: %s | –ò–≥—Ä–æ–∫–æ–≤: %d",
			clubID, roomID, phase, playersCount)))
}

// RoomMonitoring - –ª–æ–≥–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–º–Ω–∞—Ç
func (l *Logger) RoomMonitoring() {
	log.Println(l.formatMessage("üîÑ", "MONITOR", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç..."))
}

// RoomFound - –ª–æ–≥–∏—Ä—É–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—É—é –∫–æ–º–Ω–∞—Ç—É
func (l *Logger) RoomFound(clubID, roomID string, playersCount int) {
	log.Println(l.formatMessage("üè†", "ROOM",
		fmt.Sprintf("–ö–æ–º–Ω–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ | Club: %s | Room: %s | –ò–≥—Ä–æ–∫–æ–≤: %d",
			clubID, roomID, playersCount)))
}

// PlayerJoined - –ª–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
func (l *Logger) PlayerJoined(clubID, roomID, userID string, playersCount int) {
	log.Println(l.formatMessage("üë§", "PLAYER",
		fmt.Sprintf("–ò–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è | Club: %s | Room: %s | UserID: %s | –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: %d",
			clubID, roomID, userID, playersCount)))
}

// PlayerLeft - –ª–æ–≥–∏—Ä—É–µ—Ç –≤—ã—Ö–æ–¥ –∏–≥—Ä–æ–∫–∞
func (l *Logger) PlayerLeft(clubID, roomID, userID string, playersCount int) {
	log.Println(l.formatMessage("üëã", "PLAYER",
		fmt.Sprintf("–ò–≥—Ä–æ–∫ –≤—ã—à–µ–ª | Club: %s | Room: %s | UserID: %s | –û—Å—Ç–∞–ª–æ—Å—å –∏–≥—Ä–æ–∫–æ–≤: %d",
			clubID, roomID, userID, playersCount)))
}

// RedisConnected - –ª–æ–≥–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
func (l *Logger) RedisConnected(addr string) {
	log.Println(l.formatMessage("‚úÖ", "REDIS",
		fmt.Sprintf("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å–ø–µ—à–Ω–æ | –ê–¥—Ä–µ—Å: %s", addr)))
}

// RedisError - –ª–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É Redis
func (l *Logger) RedisError(operation string, err error) {
	log.Println(l.formatMessage("‚ùå", "REDIS",
		fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ '%s': %v", operation, err)))
}

// RedisReconnecting - –ª–æ–≥–∏—Ä—É–µ—Ç –ø–æ–ø—ã—Ç–∫—É –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
func (l *Logger) RedisReconnecting(attempt int) {
	log.Println(l.formatMessage("üîÑ", "REDIS",
		fmt.Sprintf("–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è #%d...", attempt)))
}

// EngineStarted - –ª–æ–≥–∏—Ä—É–µ—Ç –∑–∞–ø—É—Å–∫ –¥–≤–∏–∂–∫–∞
func (l *Logger) EngineStarted() {
	l.printBanner()
	log.Println(l.formatMessage("üöÄ", "ENGINE", "Game Engine –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"))
}

// EngineStopped - –ª–æ–≥–∏—Ä—É–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫—É –¥–≤–∏–∂–∫–∞
func (l *Logger) EngineStopped() {
	log.Println(l.formatMessage("üõë", "ENGINE", "Game Engine –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"))
}

// EngineShuttingDown - –ª–æ–≥–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
func (l *Logger) EngineShuttingDown() {
	log.Println(l.formatMessage("‚è≥", "ENGINE", "–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–≤–∏–∂–æ–∫..."))
}

// printBanner - –ø–µ—á–∞—Ç–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –±–∞–Ω–Ω–µ—Ä –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
func (l *Logger) printBanner() {
	banner := `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                        ‚ïë
‚ïë              üé≤  POKER GAME ENGINE  üé≤                 ‚ïë
‚ïë                                                        ‚ïë
‚ïë              –í–µ—Ä—Å–∏—è: 1.0.0                            ‚ïë
‚ïë              Go High-Performance Game Server          ‚ïë
‚ïë                                                        ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
`
	fmt.Println(banner)
}

// PrintSeparator - –ø–µ—á–∞—Ç–∞–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –ª–æ–≥–æ–≤
func (l *Logger) PrintSeparator() {
	log.Println("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
}

// PrintHeader - –ø–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
func (l *Logger) PrintHeader(title string) {
	l.PrintSeparator()
	log.Printf("  üìã %s", title)
	l.PrintSeparator()
}

// === –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ===

var defaultLogger = NewLogger("GameEngine")

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–≥–µ—Ä–∞

func Info(message string) {
	defaultLogger.Info(message)
}

func Infof(format string, args ...interface{}) {
	defaultLogger.Infof(format, args...)
}

func Success(message string) {
	defaultLogger.Success(message)
}

func Successf(format string, args ...interface{}) {
	defaultLogger.Successf(format, args...)
}

func Warning(message string) {
	defaultLogger.Warning(message)
}

func Warningf(format string, args ...interface{}) {
	defaultLogger.Warningf(format, args...)
}

func Error(message string) {
	defaultLogger.Error(message)
}

func Errorf(format string, args ...interface{}) {
	defaultLogger.Errorf(format, args...)
}

func Debug(message string) {
	defaultLogger.Debug(message)
}

func Debugf(format string, args ...interface{}) {
	defaultLogger.Debugf(format, args...)
}
